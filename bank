#include <iostream>
#include <string>
#include <vector>
#include <map>

using namespace std;



class customer {
	string id;
	double money;
public:
	customer(string id, double money) { this->id = id; this->money = money; };
	customer();

	void addC() {};
	void deleteC() {};


	bool login(string id) {}; //사용자 로그인
	double show() { return money; } //계좌 확인
	double in(int price) { return money + price; }; //입금
	double out(int price) { return money - price; }; //출력

};
class accountManager{
	//
public:
	void save() {};
	void load() {};
};



int main() {
	//입출력
	map<string, customer*> mcust; 
	map<string, customer*> ::iterator it;

	customer cust;
	cout << "-------------------------------" << endl;
	cout << "         VEDA    BANK" << endl;
	cout << "1. 로그인 2. 회원가입	3.종료" << endl;
	cout << "-------------------------------" << endl;


	cout << "숫자를 입력하시오 : ";
	int sel;
	cin >> sel;
	switch (sel)
	{
	case 1:
		cout << "ID: ";
		string logid;
		cin >> logid;
		if (mcust.find(logid) == mcust.end()) cout << "해당 ID 없음" << endl;
		else {
			int choice;
			cout << "로그인 성공. 환영합니다."<<logid<<" 업무 선택 : 1.잔액 조회		2.입금		3.출금" << endl;
			cin >> choice;
			switch (choice)
			{
			case 1:   cout << mcust[logid]; //잔액 조회
			case 2:		cout << "입금하실 금액: "; //입금
				double in; cin >> in;
				mcust.insert({ logid, new customer("", +in) });
					
			case 3: cout << "출금하실 금액: "; //출금
				double out; cin >> out;
				mcust.insert({ logid, new customer("", -out) });
				
			}

		}
		for (it = mcust.begin(); it != mcust.end(); it++)
		{
			
		}
		//입출력
		//종료

	case 2:
		cout << "생성할 ID :";
		string newid;
		cin >> newid;

		mcust.insert({newid, new customer("", 0)});

		cout << newid<< " 생성완료";


			//삭제

	case 3:
		return 0;
	}

}
